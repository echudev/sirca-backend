// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (brand, model, description, serial_number) 
VALUES ($1, $2, $3, $4)
RETURNING id, brand, model, description, created_at
`

type CreateItemParams struct {
	Brand        string
	Model        string
	Description  sql.NullString
	SerialNumber string
}

type CreateItemRow struct {
	ID          int32
	Brand       string
	Model       string
	Description sql.NullString
	CreatedAt   sql.NullTime
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (CreateItemRow, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.Brand,
		arg.Model,
		arg.Description,
		arg.SerialNumber,
	)
	var i CreateItemRow
	err := row.Scan(
		&i.ID,
		&i.Brand,
		&i.Model,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items 
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, brand, model, created_at 
FROM items 
WHERE id = $1
`

type GetItemRow struct {
	ID        int32
	Brand     string
	Model     string
	CreatedAt sql.NullTime
}

func (q *Queries) GetItem(ctx context.Context, id int32) (GetItemRow, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i GetItemRow
	err := row.Scan(
		&i.ID,
		&i.Brand,
		&i.Model,
		&i.CreatedAt,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT id, brand, model, description, created_at 
FROM items
`

type ListItemsRow struct {
	ID          int32
	Brand       string
	Model       string
	Description sql.NullString
	CreatedAt   sql.NullTime
}

func (q *Queries) ListItems(ctx context.Context) ([]ListItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListItemsRow
	for rows.Next() {
		var i ListItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.Brand,
			&i.Model,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE items 
SET brand = $2, model = $3 
WHERE id = $1
RETURNING id, brand, model, description, created_at
`

type UpdateItemParams struct {
	ID    int32
	Brand string
	Model string
}

type UpdateItemRow struct {
	ID          int32
	Brand       string
	Model       string
	Description sql.NullString
	CreatedAt   sql.NullTime
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (UpdateItemRow, error) {
	row := q.db.QueryRowContext(ctx, updateItem, arg.ID, arg.Brand, arg.Model)
	var i UpdateItemRow
	err := row.Scan(
		&i.ID,
		&i.Brand,
		&i.Model,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
